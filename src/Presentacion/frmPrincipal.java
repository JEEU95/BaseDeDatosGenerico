package Presentacion;

import Datos_DAO.Connection_DB;
import Logica.Formato;
import Logica.Registro;
import Logica.Tablas;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Jorge
 */
public class frmPrincipal extends javax.swing.JFrame {

    String user = "";
    String pass = "";
    String orden = "ASC"; //Valor inicial de los RadioButton en consultas
    Tablas tabla;

    public frmPrincipal(String user, String pass) throws SQLException, Exception {
        this.user = user;
        this.pass = pass;
        this.tabla = new Tablas(user, pass);
        initComponents();
        btngOrdenar.add(rbASC);
        btngOrdenar.add(rbDSC);
        llenarCombos();
    }

    public void llenarCombos() throws SQLException, Exception {
        //Tablas tablas = new Tablas();

        for (String item : tabla.nombresTablas()) {
            cmbTablas.addItem(item);
            cmbTablasEdit.addItem(item);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        btngOrdenar = new javax.swing.ButtonGroup();
        tabpConsultas = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        cmbTablas = new javax.swing.JComboBox();
        cmbCampos = new javax.swing.JComboBox();
        btnAgregar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbConsultas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmbOp = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cmbFiltrar = new javax.swing.JComboBox();
        rbASC = new javax.swing.JRadioButton();
        rbDSC = new javax.swing.JRadioButton();
        txtCondicion = new javax.swing.JTextField();
        cmbOrdenar = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cmbTablasEdit = new javax.swing.JComboBox();
        btnActualizar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbTablaDatos = new javax.swing.JTable();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnArchivo = new javax.swing.JMenu();
        mnPermisos = new javax.swing.JMenuItem();
        mnNuevo = new javax.swing.JMenuItem();
        mnUsuario = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnSalir = new javax.swing.JMenuItem();
        mnAyuda = new javax.swing.JMenu();
        mnInfo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);

        jPanel1.setBackground(java.awt.SystemColor.controlHighlight);

        cmbTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTablasActionPerformed(evt);
            }
        });

        cmbCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCamposActionPerformed(evt);
            }
        });

        btnAgregar.setForeground(new java.awt.Color(0, 51, 255));
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/agregar.png"))); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        tbConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Campos"
            }
        ));
        jScrollPane2.setViewportView(tbConsultas);

        jLabel2.setText("Seleccione una Tabla");

        jLabel3.setText("Seleccione un campo");

        jLabel4.setText("Campos seleccionados:");

        btnAceptar.setForeground(new java.awt.Color(0, 204, 51));
        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/aceptar.png"))); // NOI18N
        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnBorrar.setForeground(new java.awt.Color(255, 0, 0));
        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/eliminar.png"))); // NOI18N
        btnBorrar.setText("Eliminar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        jLabel6.setText("Filtrar por:");

        cmbOp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", "<", ">", "<=", ">=" }));

        jLabel7.setText("Ordenar por:");

        cmbFiltrar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--null--" }));
        cmbFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltrarActionPerformed(evt);
            }
        });

        rbASC.setSelected(true);
        rbASC.setText("ASC");
        rbASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbASCActionPerformed(evt);
            }
        });

        rbDSC.setText("DESC");
        rbDSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDSCActionPerformed(evt);
            }
        });

        cmbOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrdenarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTablas, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(btnAgregar)
                            .addGap(28, 28, 28)
                            .addComponent(btnBorrar))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(rbASC)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                            .addComponent(rbDSC))
                        .addComponent(txtCondicion))
                    .addComponent(btnAceptar))
                .addGap(396, 396, 396))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cmbOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCondicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7)
                            .addComponent(rbDSC)
                            .addComponent(rbASC)
                            .addComponent(cmbOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnAceptar)
                    .addComponent(btnBorrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpConsultas.addTab("Consultas", jPanel1);

        jPanel2.setBackground(java.awt.SystemColor.controlHighlight);

        jLabel5.setText("Seleccione una Tabla");

        cmbTablasEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTablasEditActionPerformed(evt);
            }
        });

        btnActualizar.setForeground(new java.awt.Color(51, 255, 0));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/actualizar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(tbTablaDatos);

        btnNuevo.setForeground(new java.awt.Color(0, 102, 255));
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/agregar.png"))); // NOI18N
        btnNuevo.setText("Agregar");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnEliminar.setForeground(new java.awt.Color(255, 0, 0));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/editar.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(cmbTablasEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btnNuevo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(44, 44, 44))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(btnActualizar)
                    .addComponent(cmbTablasEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnEditar)
                    .addComponent(btnNuevo))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        tabpConsultas.addTab("Registros", jPanel2);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/Logo_UCuenca.png"))); // NOI18N

        mnArchivo.setText("Inicio");

        mnPermisos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/configurar.png"))); // NOI18N
        mnPermisos.setText("Configurar permisos de usuario");
        mnPermisos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPermisosActionPerformed(evt);
            }
        });
        mnArchivo.add(mnPermisos);

        mnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/nuevo_usuario.png"))); // NOI18N
        mnNuevo.setText("Crear usuario");
        mnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnNuevoActionPerformed(evt);
            }
        });
        mnArchivo.add(mnNuevo);

        mnUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/cambiar_usuario.png"))); // NOI18N
        mnUsuario.setText("Cambiar de usuario");
        mnUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnUsuarioActionPerformed(evt);
            }
        });
        mnArchivo.add(mnUsuario);
        mnArchivo.add(jSeparator1);

        mnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/salir.png"))); // NOI18N
        mnSalir.setText("Salir");
        mnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSalirActionPerformed(evt);
            }
        });
        mnArchivo.add(mnSalir);

        jMenuBar1.add(mnArchivo);

        mnAyuda.setText("Ayuda");

        mnInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentacion/gui/listado.png"))); // NOI18N
        mnInfo.setText("Información");
        mnInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnInfoActionPerformed(evt);
            }
        });
        mnAyuda.add(mnInfo);

        jMenuBar1.add(mnAyuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tabpConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(308, 308, 308)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 251, Short.MAX_VALUE)
                        .addComponent(btnSalir)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabpConsultas)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("Presentacion/gui/icono.png"));
        return retValue;
    }

    int ncampos = 0;
    ArrayList<String> camposTablaEdit = new ArrayList();

    public void llenarTablaRegistros() throws SQLException, Exception {
        String nombre = (String) cmbTablasEdit.getSelectedItem();

        //  Tablas tablas = new Tablas();
        camposTablaEdit = tabla.camposTabla(nombre);
        DefaultTableModel tb = (DefaultTableModel) tbTablaDatos.getModel();
        if (ncampos > 0) {
            ncampos = 0;
            tb.setColumnCount(0);
            tb.setRowCount(0);
            System.out.println("Columnas eliminadas");
        }

        for (String campo : tabla.camposTabla(nombre)) {
            ncampos++;
            tb.addColumn(campo);

        }

        ArrayList<Registro> registros = tabla.listarRegistros(nombre);

        int i = 0;
        for (Registro reg : registros) {
            int j = 0;

            tb.addRow(new Object[]{""});
            for (Object dat : reg.getDatos()) {
                tb.setValueAt(dat, i, j);
                j++;
            }

            i++;
        }
    }
    private void cmbTablasEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTablasEditActionPerformed
        try {
            llenarTablaRegistros();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al llenar tabla registro");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al llenar tabla registro");
        }
    }//GEN-LAST:event_cmbTablasEditActionPerformed

    private void cmbTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTablasActionPerformed
        String nombre = (String) cmbTablas.getSelectedItem();
        DefaultTableModel tb = (DefaultTableModel) tbConsultas.getModel();
        //Tablas tabla = new Tablas();
        tb.setRowCount(0);
        cmbCampos.removeAllItems();
        cmbFiltrar.removeAllItems();
        cmbFiltrar.addItem("--null--");
        cmbOrdenar.removeAllItems();
        cmbOrdenar.addItem("--null--");

        try {
            for (String campo : tabla.camposTabla(nombre)) {
                cmbCampos.addItem(campo);

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al llenar combos tablas");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al llenar combos tablas");
        }

    }//GEN-LAST:event_cmbTablasActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        boolean per = true;

        String campo = (String) cmbCampos.getSelectedItem();

        DefaultTableModel tb = (DefaultTableModel) tbConsultas.getModel();
        for (int i = 0; i < tb.getRowCount(); i++) {
            if (campo.equals(tb.getValueAt(i, 0))) {
                per = false;
                break;
            }
        }

        if (per) {
            tb.addRow(new Object[]{campo});
            cmbFiltrar.addItem(campo);
            cmbOrdenar.removeItem("--null--");
            cmbOrdenar.addItem(campo);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Campo ya selecionado!");
        }


    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        try {
            llenarTablaRegistros();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al actualizar");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al actualizar");
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        Registro registro = new Registro();

        Object entrada = null;

        String aux;

        int i = 0;

        DefaultTableModel tb = (DefaultTableModel) tbTablaDatos.getModel();

        for (String camp : camposTablaEdit) { //Recorre los campos existentes en la tabla

            aux = (String) tb.getValueAt(0, i); //variable auxiliar para ver que tipo de datos estan en la 1ra fila de la tabla

            if (aux.contains("-") && aux.contains(":") && aux.contains(" ")) { //uso de la variable auxiliar para determinar si es fecha

                entrada = (String) JOptionPane.showInputDialog(null, camp + ":       (YYYY-MM-DD)") + "DATE";

            } else {

                entrada = JOptionPane.showInputDialog(null, camp + ":");

            }

            if (entrada == null) {

                System.out.println("Cancelar");
                break;
            } else {

                registro.setDatos(entrada);
            }

            i++;

        }

        if (entrada != null) {

            try {
                //Tablas tabla = new Tablas();

                tabla.insertarDatos((String) cmbTablasEdit.getSelectedItem(), registro);

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Error al ingresar un nuevo registro");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, "Error al ingresar un nuevo registro");
            }
        }
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        DefaultTableModel tb = (DefaultTableModel) tbTablaDatos.getModel();

        ArrayList<String> camposEditar = new ArrayList();
        ArrayList<String> camposClave = new ArrayList();
        String entrada;
        String aux;
        int i = tbTablaDatos.getSelectedRow();
        try {
            tb.getValueAt(i, 0);

            for (int j = 0; j < ncampos; j++) {
                boolean date = false;

                aux = (String) tb.getValueAt(0, j); //variable auxiliar para ver que tipo de datos estan en la 1ra fila de la tabla
                if (aux == null) {
                    aux = "";
                }

                if (aux.contains("-") && aux.contains(":") && aux.contains(" ")) { //uso de la variable auxiliar para determinar si es fecha

                    String llenar = (String) tb.getValueAt(i, j);
                    entrada = (String) JOptionPane.showInputDialog(null, tb.getColumnName(j) + ":       (YYYY-MM-DD)", llenar.substring(0, llenar.length() - 11)) + " 00:00:00.0";
                    date = true;
                    System.out.println("entrada: " + entrada);

                } else {

                    entrada = (String) JOptionPane.showInputDialog(null, tb.getColumnName(j) + ":", tb.getValueAt(i, j));
                    System.out.println("entrada: " + entrada);
                }

                if (tb.getColumnName(j).contains("ID")) {
                    camposClave.add(tb.getColumnName(j) + "='" + (String) tb.getValueAt(i, j) + "'");
                }

                if (!entrada.equals((String) tb.getValueAt(i, j)) && entrada != null) {
                    if (date) {
                        camposEditar.add(tb.getColumnName(j) + "=TO_DATE('" + entrada.substring(0, entrada.length() - 11) + "','yyyy-mm-dd')");
                    } else {
                        camposEditar.add(tb.getColumnName(j) + "='" + entrada + "'");

                    }
                }
            }
            //Tablas tabla= new Tablas(user,pass);
            String nom = (String) cmbTablasEdit.getSelectedItem();

            tabla.editarDatos(nom, camposClave, camposEditar);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Seleccione una fila para poder editar!");
            return;
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        DefaultTableModel tb = (DefaultTableModel) tbTablaDatos.getModel();
        ArrayList<String> camposClave = new ArrayList();
        int i = tbTablaDatos.getSelectedRow();
        Registro reg = new Registro();
        System.out.println("Posicion Eliminar:" + i);
        try {
            for (int j = 0; j < tb.getColumnCount(); j++) {
                if (tb.getColumnName(j).contains("ID")) {
                    camposClave.add(tb.getColumnName(j) + "='" + (String) tb.getValueAt(i, j) + "'");
                }
                reg.setDatos(tb.getValueAt(i, j));
            }

            int res = JOptionPane.showConfirmDialog(rootPane, "Esta seguro que desea eliminar:\n" + reg.getDatos(), "ELIMINAR (CONFIRMACION)", 0);
            if (res == 0) {
                System.out.println("Dato Eliminado");

                String nom = (String) cmbTablasEdit.getSelectedItem();
                tabla.eliminarDatos(nom, camposClave);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Seleccione la fila a eliminar!");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        DefaultTableModel tb = (DefaultTableModel) tbConsultas.getModel();

        int i = tbConsultas.getSelectedRow();
        System.out.println("Posicion a Eliminar:" + i);
        try {
            if (cmbFiltrar.getSelectedItem().equals(tb.getValueAt(i, 0))) {
                cmbFiltrar.setSelectedIndex(0);
            }
            cmbFiltrar.removeItem(tb.getValueAt(i, 0));

            if (cmbOrdenar.getSelectedItem().equals(tb.getValueAt(i, 0))) {
                cmbOrdenar.setSelectedIndex(0);
            }
            cmbOrdenar.removeItem(tb.getValueAt(i, 0));

            tb.removeRow(i);
            if (tb.getRowCount() == 0) {
                cmbOrdenar.addItem("--null--");
            }
            System.out.println("Combo index:" + cmbOrdenar.getItemAt(0) + "  Tabla index:" + i);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Seleccione la fila a eliminar!");
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        try {
            verConsultas();
            cmbFiltrar.removeAllItems();
            cmbFiltrar.addItem("--null--");
            cmbOrdenar.removeAllItems();
            cmbOrdenar.addItem("--null--");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al realizar la consulta");
        }
    }//GEN-LAST:event_btnAceptarActionPerformed
    Boolean editarUser = false;
    ArrayList<Registro> usuarios = null;

    public void llenarUsuarios() throws Exception {
        Tablas tabla = new Tablas(user, pass);
        Registro reg = new Registro();
        ArrayList<String> campos = new ArrayList();
        campos.add("USERNAME");
        reg.setDatos(campos);
        reg.setDatos("DBA_USERS");
        Object o = (Object) reg;

        try {

            usuarios = tabla.listarDatos(o);

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(rootPane, "Error al llenar usuarios");
        }
        if (usuarios.size() > 0) {
            editarUser = true;
        }

    }

    private void mnPermisosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPermisosActionPerformed
        try {
            llenarUsuarios();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al intentar listar todos los usuarios");
        }

        if (user.equalsIgnoreCase("system")) {
            //if (editarUser) {
            frmUsuarios us = new frmUsuarios(user, pass);
            try {
                us.setUsuarios(usuarios);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, "Error al enviar los usuarios al frmUsuarios");
            }
            us.setVisible(true);

            dispose();
        } else {
            JOptionPane.showMessageDialog(rootPane, "No tienes los permisos suficientes! \nPor favor ingresa como administrador(System)");
        }
    }//GEN-LAST:event_mnPermisosActionPerformed

    private void mnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnSalirActionPerformed

    private void mnUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnUsuarioActionPerformed
        frmLogin login = new frmLogin();
        login.setVisible(true);

        dispose();
    }//GEN-LAST:event_mnUsuarioActionPerformed


    private void cmbFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltrarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFiltrarActionPerformed

    private void cmbOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrdenarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOrdenarActionPerformed

    private void cmbCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCamposActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCamposActionPerformed

    private void rbASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbASCActionPerformed
        orden = "ASC";
    }//GEN-LAST:event_rbASCActionPerformed

    private void rbDSCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDSCActionPerformed
        orden = "DESC";
    }//GEN-LAST:event_rbDSCActionPerformed

    private void mnInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnInfoActionPerformed
        try {
            File path = new File("./Informe.pdf");
            
            System.out.println("Dir: "+path.getCanonicalPath());
            System.out.println("Dir: "+path.getAbsolutePath());
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
            System.out.println("No se pudo abrir el archivo");
        }
    }//GEN-LAST:event_mnInfoActionPerformed

    private void mnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnNuevoActionPerformed

        if (user.equalsIgnoreCase("system")) {

            frmNuevoUsuario us = new frmNuevoUsuario(user, pass);
            us.setVisible(true);

            dispose();
        } else {
            JOptionPane.showMessageDialog(rootPane, "No tienes los permisos suficientes! \nPor favor ingresa como administrador(System)");
        }
    }//GEN-LAST:event_mnNuevoActionPerformed

    public void verConsultas() throws Exception {
        DefaultTableModel tb = (DefaultTableModel) tbConsultas.getModel();
        int i = tbConsultas.getRowCount();
        if (i == 0) {
            JOptionPane.showMessageDialog(rootPane, "Agregue almenos un campo");
        } else {

            Registro r = new Registro();
            ArrayList<String> campos = new ArrayList();
            String tab = (String) cmbTablas.getSelectedItem();
            String condicion = "";
            for (int j = 0; j < i; j++) {

                String c = (String) tb.getValueAt(j, 0);
                System.out.println("Campos tabla: " + c);
                campos.add(c);
                System.out.println("Agregado");
            }
            if (cmbFiltrar.getSelectedIndex() > 0 && !txtCondicion.getText().equals(null)) {
                //Aqui el igual podria cambiar
                condicion += "WHERE " + cmbFiltrar.getSelectedItem() + cmbOp.getSelectedItem() + "'" + txtCondicion.getText() + "' ";
            }
            condicion += "ORDER BY " + cmbOrdenar.getSelectedItem() + " " + orden;
            r.setDatos(campos);
            r.setDatos(tab);
            r.setDatos(condicion);
            Object o = r;
            ArrayList<Registro> respuesta = tabla.listarDatos(o);

            frmReporte reporte = new frmReporte(respuesta, o);
            reporte.setVisible(true);

            for (Registro res : respuesta) {
                System.out.println(res.getDatos());
            }

        }
        txtCondicion.setText(null);
        tb.setRowCount(0);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new frmPrincipal("hr", "1234").setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup btngOrdenar;
    private javax.swing.JComboBox cmbCampos;
    private javax.swing.JComboBox cmbFiltrar;
    private javax.swing.JComboBox cmbOp;
    private javax.swing.JComboBox cmbOrdenar;
    private javax.swing.JComboBox cmbTablas;
    private javax.swing.JComboBox cmbTablasEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu mnArchivo;
    private javax.swing.JMenu mnAyuda;
    private javax.swing.JMenuItem mnInfo;
    private javax.swing.JMenuItem mnNuevo;
    private javax.swing.JMenuItem mnPermisos;
    private javax.swing.JMenuItem mnSalir;
    private javax.swing.JMenuItem mnUsuario;
    private javax.swing.JRadioButton rbASC;
    private javax.swing.JRadioButton rbDSC;
    private javax.swing.JTabbedPane tabpConsultas;
    private javax.swing.JTable tbConsultas;
    private javax.swing.JTable tbTablaDatos;
    private javax.swing.JTextField txtCondicion;
    // End of variables declaration//GEN-END:variables
}
